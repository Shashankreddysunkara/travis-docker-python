# 'docker-compose up' will run this.
version: '3'  # 'docker-compose up' will run this.

# This section describes the various containers (services).
services:
  pg:
    image: postgres:10
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
    networks:
      - network
  rabbitmq:
    # There is a prebuilt RabbitMQ image; see
    # https://hub.docker.com/_/rabbitmq/ for details.
    # This variant is built on Alpine Linux (it's smaller) and includes
    # the management UI.
    image: rabbitmq:3-management-alpine
    ports:
      # HTTP management UI
      - "15672:15672"
      # The standard AMQP protocol port
      - "5672:5672"
#    networks:
#      - rabbitm-network
#
#  networks:
#    rabbitm-network:
#      driver: bridge
    networks:
      - network

  consumer:
    # If needed, Docker Compose will automatically run consumer/Dockerfile.
    build: consumer

    # Environment variables:
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'

    # Again, run on the private network.  Needed to see the "rabbitmq"
    # magic Docker DNS name.
    networks:
      - network

  publisher:
      # Identical to the consumer.
    build: publisher
    environment:
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
    networks:
      - network

networks:
    # Declare our private network.  We must declare one for the magic
    # Docker DNS to work, but otherwise its default settings are fine.
  network: { }